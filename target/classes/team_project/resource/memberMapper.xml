<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//-mybatis.org// DTD Mapper 3.0//En" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberMapper">
	<!-- 회원이 음식 즐겨찾기를 했는지 안했는지 확인-->
	<select id="ChecklikeFood" parameterType="map" resultType="int">
		 SELECT COUNT(like_id) 
		 FROM likes
		 WHERE member_id=#{member_id} and f_name=#{f_name}
	</select>

	<!-- 음식 즐겨찾기 등록 -->
	<insert id="likeFood" parameterType="map">
		insert into likes(member_id, f_name) 
		values(#{member_id}, #{f_name})
	</insert>
	
	<!-- 음식 즐겨찾기 취소 -->
	<delete id="deleteLikeFood" parameterType="map">
		delete from likes 
		where member_id=#{member_id} and f_name=#{f_name}
	</delete>
	
	<!-- 회원의 즐겨찾기 목록 -->
	<select id="getLikeList" parameterType="String" resultType="foodDto">
		SELECT f.*
		FROM food f JOIN likes l 
		ON f.f_name = l.f_name
		WHERE l.member_id = #{member_id}
		order by l.reg_date desc
	</select>
	
	
	
	<!-- 회원목록 -->
	<select id="selectMembersWithCounts" parameterType="map" resultType="memDto">
		SELECT mr.*, 
           (SELECT COUNT(*) FROM post p WHERE p.writer_id = mr.id) AS postCount,
           (SELECT COUNT(*) FROM comm c WHERE c.writter = mr.id) AS commCount
		FROM (
		    SELECT m.*, ROWNUM rnum
		    FROM (
		        SELECT * 
		        FROM member 
		        ORDER BY reg_date DESC
		    ) m
		    WHERE ROWNUM &lt;= #{endRow}
		) mr
		WHERE rnum > #{startRow}
	</select>
	
	<!-- 회원 수 -->
	<select id="countMembers" resultType="int">
		select count(id)
		from member
	</select>
	<!-- 글목록. 사용자가 쓴 글 가져오기 -->
	<select id="selectPost" parameterType="map" resultType="postDto">
		SELECT *
		FROM (
		    SELECT c.*, ROWNUM rnum
		    FROM (
		        SELECT * 
		        FROM post 
		        WHERE writer_id = #{writer_id}
		        ORDER BY upload_time DESC
		    ) c
		    WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE rnum > #{startRow}
	</select>
	
	<!-- 사용자가 쓴 글 개수 -->
	<select id="countPost" parameterType="String" resultType="int">
		select count(post_id)
		from post
		where writer_id = #{writer_id}
	</select>

	<!-- 댓글 목록. 사용자가 쓴 댓글 가져오기 -->
	<select id="selectComm" parameterType="map" resultType="commDto">
		SELECT *
		FROM (
		    SELECT c.*, ROWNUM rnum
		    FROM (
		        SELECT * 
		        FROM comm 
		        WHERE writter = #{writter}
		        ORDER BY upload_time DESC
		    ) c
		    WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE rnum > #{startRow}
	</select>
	
	<!-- 사용자가 쓴 댓글 개수 -->
	<select id="countComm" parameterType="String" resultType="int">
		select count(comm_id)
		from comm
		where writter=#{writter}
	</select>

	<!-- 회원 탈퇴. 아이디에 해당하는 회원정보 삭제 -->
	<delete id="deleteMember" parameterType="String">
		delete from member
		where id=#{id}
	</delete>

	<!-- 회원정보 수정. 아이디에 해당하는 회원의 정보 수정 -->
	<update id="updateMember" parameterType="memDto" >
		 UPDATE member
		 SET pw=#{pw}, 
		 	name=#{name}, 
		 	email=#{email}, 
		 	birth=#{birth},
		 	passport_number =#{passport_number }
        WHERE id=#{id}
	</update>
	
	<!-- 아이디 중복 확인 -->
	<select id="checkIdDuplicate" parameterType="String" resultType="int">
    	SELECT COUNT(*) FROM member WHERE id = #{id}
	</select>
	
	<!-- 회원가입. db에 회원정보 넣기 -->
	<insert id="insertOneMember" parameterType="memDto">
		insert into member(id, pw, name, birth, email, gender,passport_number )
		values(#{id}, #{pw}, #{name}, #{birth}, #{email}, #{gender}, #{passport_number})
	</insert>
	
	<!-- 로그인. 아이디와 비밀번호에 맞는 회원정보 반환 -->
	<select id="checkLogin" parameterType="map" resultType="memDto">
		select *
		from member
		where id=#{id} and pw=#{pw}
	</select>
	
	<!-- 아이디로 회원의 정보 확인 -->
	<select id="selectOneMember" parameterType="String" resultType="memDto">
		select *
		from member
		where id=#{id}
	</select>
</mapper>